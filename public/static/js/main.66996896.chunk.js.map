{"version":3,"sources":["reportWebVitals.js","context/auth.js","utils/AuthRoute.js","components/MenuBar.js","utils/MyPopup.js","components/LikeButton.js","utils/graphql.js","components/DeleteButton.js","components/PostCard.js","utils/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/Register.js","pages/SinglePost.js","App.js","ApolloProvider.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","AuthRoute","Component","component","rest","useContext","render","to","MenuBar","pathname","window","location","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","size","color","Item","username","active","as","Link","position","onClick","MyPopup","content","children","Popup","inverted","trigger","LIKE_POST_MUTATION","gql","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","useMutation","variables","postId","likePost","likeButton","Button","Icon","basic","labelPosition","Label","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","newData","getPosts","filter","p","writeQuery","deletePostOrMutation","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","src","Header","Meta","moment","fromNow","Description","extra","useForm","values","setValues","onChange","event","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","error","Form","Field","Input","placeholder","className","marginBottom","graphQLErrors","message","Home","useQuery","loading","posts","Grid","columns","Row","Column","Transition","Group","map","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","_","history","push","onError","err","extensions","exception","noValidate","label","primary","Object","keys","length","REGISTER_USER","Register","addUser","email","confirmPassword","register","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","match","params","comment","setComment","commentInputRef","useRef","console","log","postMarkup","getPost","current","blur","submitComment","deletePostCallback","comments","width","float","ref","disabled","trim","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.66996896.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { createContext, useReducer } from 'react'\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst initialState = {\r\n  user: null\r\n}\r\n\r\nif(localStorage.getItem('jwtToken')){\r\n  const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\r\n\r\n  if(decodedToken.exp * 1000 < Date.now()){ // check if token is expired\r\n    localStorage.removeItem('jwtToken') // deletes token if it is expired\r\n  } else {\r\n    initialState.user = decodedToken;\r\n  }\r\n}\r\n\r\nconst AuthContext = createContext({\r\n  user: null,\r\n  login: (userData) => {},\r\n  logout: () => {}\r\n}) \r\n\r\nfunction authReducer(state, action) {\r\n  switch(action.type) {\r\n    case 'LOGIN':\r\n      return{\r\n        ...state, user:action.payload\r\n      }\r\n    case 'LOGOUT':\r\n      return{\r\n        ...state, user: null\r\n      }\r\n    default:\r\n      return state;\r\n      \r\n  }\r\n}\r\n\r\nfunction AuthProvider(props){\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  const login = (userData) => {\r\n    localStorage.setItem('jwtToken', userData.token);\r\n    dispatch({\r\n      type: 'LOGIN',\r\n      payload: userData\r\n    });\r\n  }\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('jwtToken');\r\n    dispatch({type: 'LOGOUT'});\r\n  }\r\n  return(\r\n    <AuthContext.Provider\r\n      value={{ user: state.user, login, logout}}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\nexport { AuthContext, AuthProvider }","// serves as a redirect for user login verification\r\nimport React, { useContext } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\nfunction AuthRoute({ component: Component, ...rest }) {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return(\r\n    <Route \r\n      {...rest}\r\n      render={(props) => \r\n        user ? <Redirect to='/'/> : <Component {...props} />\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default AuthRoute;","import React, { useState, useContext } from 'react'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { AuthContext } from '../context/auth'\r\n\r\nfunction MenuBar() {\r\n  const { user, logout } = useContext(AuthContext);\r\n  const pathname = window.location.pathname;\r\n  const path = pathname === '/' ? 'home' : pathname.substr(1);\r\n  const [activeItem, setActiveItem] = useState(path);\r\n\r\n  const handleItemClick = (e, { name }) => setActiveItem(name); \r\n\r\n  const menuBar = user ? (\r\n  <Menu pointing secondary size='massive' color='teal'>\r\n    <Menu.Item\r\n      name={user.username}\r\n      active\r\n      as={Link}\r\n      to=\"/\"\r\n    />\r\n    {/* <Menu.Item\r\n      name='messages'\r\n      active={activeItem === 'messages'}\r\n      onClick={handleItemClick}\r\n    />\r\n    <Menu.Item\r\n      name='friends'\r\n      active={activeItem === 'friends'}\r\n      onClick={handleItemClick}\r\n    /> */}\r\n    <Menu.Menu position='right'>\r\n    <Menu.Item\r\n      name='logout'\r\n      onClick={logout}\r\n    />\r\n  </Menu.Menu>\r\n</Menu>\r\n) : (\r\n  <Menu pointing secondary size='massive' color='teal'>\r\n    <Menu.Item\r\n      name='home'\r\n      active={activeItem === 'home'}\r\n      onClick={handleItemClick}\r\n      as={Link}\r\n      to=\"/\"\r\n    />\r\n    {/* <Menu.Item\r\n      name='messages'\r\n      active={activeItem === 'messages'}\r\n      onClick={handleItemClick}\r\n    />\r\n    <Menu.Item\r\n      name='friends'\r\n      active={activeItem === 'friends'}\r\n      onClick={handleItemClick}\r\n    /> */}\r\n    <Menu.Menu position='right'>\r\n      <Menu.Item\r\n        name='login'\r\n        active={activeItem === 'login'}\r\n        onClick={handleItemClick}\r\n        as={Link}\r\n      to=\"/login\"\r\n      />\r\n      <Menu.Item\r\n        name='register'\r\n        active={activeItem === 'register'}\r\n        onClick={handleItemClick}\r\n        as={Link}\r\n      to=\"/register\"\r\n      />\r\n    </Menu.Menu>\r\n  </Menu>\r\n)\r\n    return menuBar;\r\n}\r\n\r\nexport default MenuBar;\r\n","import React from 'react'\r\nimport { Popup } from 'semantic-ui-react';\r\n\r\nconst MyPopup = ({content, children}) => {\r\n  return <Popup inverted content={content} trigger={children}/>\r\n}\r\n\r\nexport default MyPopup\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\nimport { Button, Label, Icon } from 'semantic-ui-react';\r\nimport MyPopup from '../utils/MyPopup'\r\n\r\nfunction LikeButton({ user, post: { id, likeCount, likes } }) {\r\n  const [liked, setLiked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user && likes.find((like) => like.username === user.username)) {\r\n      setLiked(true);\r\n    } else setLiked(false);\r\n  }, [user, likes]);\r\n\r\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n    variables: { postId: id }\r\n  });\r\n\r\n  const likeButton = user ? (\r\n    liked ? (\r\n      <Button color=\"teal\">\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    ) : (\r\n      <Button color=\"teal\" basic>\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    )\r\n  ) : (\r\n    <Button as={Link} to=\"/login\" color=\"teal\" basic>\r\n      <Icon name=\"heart\" />\r\n    </Button>\r\n  );\r\n\r\n  return (\r\n    <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\r\n      <MyPopup\r\n        content={liked ? 'Un-like' : 'Like'}>\r\n          {likeButton}\r\n        </MyPopup>\r\n      <Label basic color=\"teal\" pointing=\"left\">\r\n        {likeCount}\r\n      </Label>\r\n    </Button>\r\n  );\r\n}\r\n\r\nconst LIKE_POST_MUTATION = gql`\r\n  mutation likePost($postId: ID!) {\r\n    likePost(postId: $postId) {\r\n      id\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      likeCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport default LikeButton;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const FETCH_POSTS_QUERY = gql`\r\n  {\r\n    getPosts{\r\n    id body createdAt username likeCount\r\n    likes{\r\n      username\r\n    }\r\n      commentCount\r\n      comments{\r\n        id username createdAt body\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport { Button, Confirm, Icon } from 'semantic-ui-react';\r\nimport { FETCH_POSTS_QUERY } from '../utils/graphql';\r\nimport MyPopup from '../utils/MyPopup'\r\n\r\nconst DeleteButton = ({ postId, commentId, callback }) => {\r\n  const [confirmOpen, setConfirmOpen] = useState(false)\r\n\r\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION\r\n  const [deletePostOrMutation] = useMutation(mutation, {\r\n    update(proxy){\r\n      setConfirmOpen(false);\r\n      if(!commentId){\r\n        const data = proxy.readQuery({\r\n            query: FETCH_POSTS_QUERY\r\n          });\r\n          let newData = [...data.getPosts];\r\n          newData = [newData.filter(p => p.id !== postId), ...newData];\r\n          proxy.writeQuery({ query: FETCH_POSTS_QUERY, data: { ...data, getPosts: {newData}} });\r\n      }\r\n      if(callback) callback();\r\n    },\r\n    variables: { postId, commentId }\r\n  })\r\n\r\n  return (\r\n    <>\r\n    <MyPopup\r\n      content={commentId ? 'Delete comment' : 'Delete post'}>\r\n      <Button as='div' color='red' floated='right' onClick={() => setConfirmOpen(true)}> \r\n        <Icon name='trash' style={{ margin: '0px' }} />\r\n      </Button>\r\n    </MyPopup>\r\n    <Confirm\r\n      open={confirmOpen}\r\n      onCancel={() => setConfirmOpen(false)}\r\n      onConfirm={deletePostOrMutation}\r\n    />\r\n    </>  \r\n  )\r\n}\r\n\r\nconst DELETE_POST_MUTATION = gql `\r\n  mutation deletePost($postId: ID!){\r\n    deletePost(postId: $postId)\r\n  }\r\n`\r\n\r\nconst DELETE_COMMENT_MUTATION = gql `\r\n  mutation deleteComment($postId: ID!, $commentId: ID!){\r\n    deleteComment(postId: $postId, commentId: $commentId){\r\n      id\r\n      comments{\r\n        id username createdAt body\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`\r\n\r\nexport default DeleteButton\r\n","import React, { useContext } from 'react'\r\nimport { Card, Icon, Label, Image, Button, Popup } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport LikeButton from './LikeButton';\r\nimport DeleteButton from './DeleteButton';\r\nimport MyPopup from '../utils/MyPopup'\r\n\r\nfunction PostCard({post: {body, createdAt, id, username, likeCount, commentCount, likes}}) {\r\n\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Card fluid>\r\n      <Card.Content>\r\n        <Image\r\n          floated='right'\r\n          size='mini'\r\n          src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n        />\r\n        <Card.Header>{username}</Card.Header>\r\n        <Card.Meta as={Link} to={`/posts/${id}`}>{moment(createdAt).fromNow()}</Card.Meta>\r\n        <Card.Description>\r\n          {body}\r\n        </Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n      <Popup \r\n        content='Like a post'\r\n        inverted\r\n        trigger={\r\n        <LikeButton user={user} post={{ id, likes, likeCount}}/>\r\n      }\r\n      />\r\n      <MyPopup\r\n        content='Comment on post'>\r\n          <Button labelPosition='right' as={Link} to={`/posts/${id}`}>\r\n            <Button color='blue' basic>\r\n              <Icon name='comments' />\r\n            </Button>\r\n            <Label  basic color='blue' pointing='left'>\r\n              {commentCount}\r\n            </Label>\r\n        </Button>\r\n      </MyPopup>\r\n    {user && user.username === username && <DeleteButton postId={id} />}\r\n      </Card.Content>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default PostCard\r\n","import { useState } from 'react'\r\n\r\nexport const useForm = (callback, initialState = {}) => {\r\n  const [values, setValues] = useState(initialState);\r\n\r\n  const onChange = (event) => {\r\n    setValues({...values, [event.target.name]: event.target.value})\r\n  }\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    callback();\r\n  }\r\n\r\n  return {\r\n    onChange,\r\n    onSubmit,\r\n    values\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Form, Button } from 'semantic-ui-react'\r\nimport gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/client'\r\n\r\nimport { useForm } from '../utils/hooks';\r\nimport { FETCH_POSTS_QUERY } from '../utils/graphql'\r\n\r\nfunction PostForm() {\r\n\r\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\r\n    body: ''\r\n  });\r\n\r\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\r\n    variables: values,\r\n    update(proxy, result) {\r\n      const data = proxy.readQuery({ \r\n        query: FETCH_POSTS_QUERY,\r\n      })\r\n      proxy.writeQuery({ // writes comments to cache to update site in order to show posts when they are created\r\n        query: FETCH_POSTS_QUERY,\r\n        data: {\r\n        getPosts: [\r\n          result.data.createPost,\r\n          ...data.getPosts,\r\n          ],    \r\n        },\r\n      })\r\n      values.body = ''\r\n    }\r\n  });\r\n\r\n  function createPostCallback() {\r\n    createPost();\r\n  }\r\n  return (\r\n    <>\r\n    <Form onSubmit={onSubmit}>\r\n      <h2>Create a post: </h2>\r\n      <Form.Field>\r\n        <Form.Input \r\n          placeholder='Hi World'\r\n          name='body'\r\n          onChange={onChange}\r\n          value={values.body}\r\n          error={error ? true : false}\r\n        />\r\n        <Button type='submit' color='teal'>Submit</Button>  \r\n      </Form.Field>\r\n    </Form>\r\n    {error && (\r\n      <div className=\"ui error message\" style={{marginBottom: '20px'}}>\r\n        <ul className=\"list\">\r\n          <li>{error.graphQLErrors[0].message}</li>\r\n        </ul>\r\n      </div>\r\n    )}\r\n    </>\r\n  )\r\n}\r\n\r\nconst CREATE_POST_MUTATION = gql`\r\n  mutation createPost($body: String!) {\r\n    createPost(body: $body){\r\n      id body createdAt username\r\n      likes{\r\n        id username createdAt\r\n      }\r\n      likeCount\r\n      comments{\r\n        id body createdAt username\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`\r\n\r\nexport default PostForm\r\n","import React, { useContext }  from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport {Grid, Transition} from 'semantic-ui-react'\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport PostCard from '../components/PostCard.js';\r\nimport PostForm from '../components/PostForm.js';\r\nimport { FETCH_POSTS_QUERY } from '../utils/graphql'\r\n\r\n\r\nconst Home = () => {\r\n  const { user } = useContext(AuthContext);\r\n  const { loading, data: { getPosts: posts } = {} } = useQuery(FETCH_POSTS_QUERY)\r\n\r\n  return (\r\n    <Grid columns={3}>\r\n      <Grid.Row className=\"page-title\">\r\n        <h1>Recent Posts</h1>\r\n      </Grid.Row>\r\n    <Grid.Row>\r\n      {user && (\r\n        <Grid.Column>\r\n          <PostForm/>\r\n        </Grid.Column>\r\n      ) }\r\n      {loading ? (\r\n        <h1>Loading posts..</h1>\r\n      ) : (\r\n        <Transition.Group>\r\n        {posts && posts.map(post => (\r\n          <Grid.Column key={post.id} style={{marginBottom: '1rem'}}>\r\n            <PostCard post={post} />\r\n          </Grid.Column>\r\n        ))}\r\n        </Transition.Group>\r\n      )}\r\n    </Grid.Row>\r\n  </Grid>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React, { useState, useContext } from 'react'\r\nimport { Form, Button } from 'semantic-ui-react';\r\nimport { useMutation } from \"@apollo/client\"\r\nimport gql from 'graphql-tag'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport {useForm } from '../utils/hooks'\r\n\r\nconst Login = (props) => {\r\n  const context = useContext(AuthContext)\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const { onChange, onSubmit, values} = useForm(loginUserCallback, {\r\n    username: '',\r\n    password: ''\r\n  })\r\n\r\n  const [loginUser, { loading}] = useMutation(LOGIN_USER, {\r\n    update(_, {data: {login: userData }}){\r\n      context.login(userData)\r\n      props.history.push('/');\r\n    },\r\n    onError(err){\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n    },\r\n    variables: values\r\n  })\r\n\r\n  function loginUserCallback() {\r\n    loginUser();\r\n  }\r\n\r\n  return (\r\n    <div className='form-container'>\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\r\n        <h1>Login</h1>\r\n        {/* {} */}\r\n        <Form.Input\r\n          label='username'\r\n          placeholder='Username...'\r\n          name='username'\r\n          type='text'\r\n          value={values.username}\r\n          error={errors.username ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        {/* {} */}\r\n        <Form.Input\r\n          label='password'\r\n          placeholder='Password...'\r\n          name='password'\r\n          type='password'\r\n          value={values.password}\r\n          error={errors.password ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Login\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors).length > 0 && (\r\n        <div className=\"ui error message\">\r\n        <ul className=\"list\">\r\n          {Object.values(errors).map(value => (\r\n            <li key={value}>{value}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst LOGIN_USER = gql `\r\n  mutation login(\r\n    $username: String!\r\n    $password: String!\r\n  ) {\r\n    login(\r\n        username: $username\r\n        password: $password\r\n    ){\r\n      id email username createdAt token\r\n    }\r\n  }\r\n`\r\nexport default Login\r\n","import React, { useState, useContext } from 'react'\r\nimport { Form, Button } from 'semantic-ui-react';\r\nimport { useMutation } from \"@apollo/client\"\r\nimport gql from 'graphql-tag'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport {useForm } from '../utils/hooks'\r\n\r\nconst Register = (props) => {\r\n  const context = useContext(AuthContext)\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const { onChange, onSubmit, values} = useForm(registerUser, {\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: ''\r\n  })\r\n\r\n  const [addUser, { loading}] = useMutation(REGISTER_USER, {\r\n    update(_, {data: { register: userData }}){\r\n      context.login(userData);\r\n      props.history.push('/');\r\n    },\r\n    onError(err){\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n    },\r\n    variables: values\r\n  })\r\n\r\n  function registerUser() {\r\n    addUser();\r\n  }\r\n\r\n  return (\r\n    <div className='form-container'>\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\r\n        <h1>Register</h1>\r\n        {/* {} */}\r\n        <Form.Input\r\n          label='username'\r\n          placeholder='Username...'\r\n          name='username'\r\n          type='text'\r\n          value={values.username}\r\n          error={errors.username ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        {/* {} */}\r\n        <Form.Input\r\n          label='email'\r\n          placeholder='Email...'\r\n          name='email'\r\n          type='email'\r\n          value={values.email}\r\n          error={errors.email ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        {/* {} */}\r\n        <Form.Input\r\n          label='password'\r\n          placeholder='Password...'\r\n          name='password'\r\n          type='password'\r\n          value={values.password}\r\n          error={errors.password ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label='Confirm Password'\r\n          placeholder='Confirm Password...'\r\n          name='confirmPassword'\r\n          type='password'\r\n          value={values.confirmPassword}\r\n          error={errors.confirmPassword ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Register\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors).length > 0 && (\r\n        <div className=\"ui error message\">\r\n        <ul className=\"list\">\r\n          {Object.values(errors).map(value => (\r\n            <li key={value}>{value}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst REGISTER_USER = gql `\r\n  mutation register(\r\n    $username: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        username: $username\r\n        email: $email\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n      }\r\n    ){\r\n      id email username createdAt token\r\n    }\r\n  }\r\n`\r\n\r\nexport default Register\r\n","import React, { useContext, useRef, useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/client'\r\nimport { Button, Card, Grid, Form, Image, Icon, Label } from 'semantic-ui-react';\r\nimport moment from 'moment';\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport LikeButton from '../components/LikeButton.js';\r\nimport DeleteButton from '../components/DeleteButton.js';\r\nimport MyPopup from '../utils/MyPopup.js';\r\n\r\nconst SinglePost = (props) => {\r\n  const postId = props.match.params.postId;\r\n  const { user } = useContext(AuthContext)\r\n  const [comment, setComment] = useState('')\r\n  const commentInputRef = useRef(null);\r\n  console.log(postId)\r\n\r\n  const { data: { getPost } = {} } = useQuery(FETCH_POST_QUERY, {\r\n    variables: {\r\n      postId\r\n    }\r\n});\r\n\r\nconst [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\r\n  update(){\r\n    setComment('')\r\n    commentInputRef.current.blur();\r\n  },\r\n  variables: { \r\n    postId, \r\n    body: comment\r\n  }\r\n})\r\n\r\nfunction deletePostCallback(){\r\n  props.history.push('/');\r\n}\r\n  \r\n  let postMarkup;\r\n  if(!getPost){\r\n    console.log('what the fuck')\r\n    postMarkup = <p>Loading post....</p>;\r\n  } else{\r\n    \r\n    const { id, body, createdAt, username, comments, likes, likeCount, commentCount } = getPost;\r\n\r\n    postMarkup = (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column width={2}>\r\n            <Image\r\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n              size=\"small\"\r\n              float=\"right\"\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column width={10}>\r\n            <Card fluid>\r\n              <Card.Content>\r\n                <Card.Header>{username}</Card.Header>\r\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\r\n                <Card.Description>{body}</Card.Description>\r\n              </Card.Content>\r\n              <hr />\r\n              <Card.Content extra>\r\n                <LikeButton user={user} post={{ id, likeCount, likes }} />\r\n                  <MyPopup \r\n                    content='Comment on post'>\r\n                      <Button\r\n                        as=\"div\"\r\n                        labelPosition=\"right\"\r\n                        onClick={() => console.log('Comment on post')}\r\n                      >\r\n                      <Button basic color=\"blue\">\r\n                        <Icon name=\"comments\" />\r\n                      </Button>\r\n                      <Label basic color=\"blue\" pointing=\"left\">\r\n                        {commentCount}\r\n                      </Label>\r\n                      </Button>\r\n                  </MyPopup>\r\n                {user && user.username === username && (\r\n                  <DeleteButton postId={id} callback={deletePostCallback}/>\r\n                )}\r\n              </Card.Content>\r\n            </Card>\r\n            {user && (\r\n              <Card fluid>\r\n                <Card.Content>\r\n                  <p>Post a comment...</p>\r\n                  <Form>\r\n                    <div className=\"ui action input fluid\">\r\n                      <input \r\n                        type=\"text\" \r\n                        placeholder=\"Comment...\" \r\n                        name=\"comment\" \r\n                        value={comment} \r\n                        onChange={(event) => setComment(event.target.value)}\r\n                        ref={commentInputRef} />\r\n                      <button \r\n                        type=\"submit\" \r\n                        className=\"ui button teal\" \r\n                        disabled={comment.trim() === ''} \r\n                        onClick={submitComment}>Submit</button>\r\n                    </div>\r\n                  </Form>\r\n                </Card.Content> \r\n              </Card>\r\n            )}\r\n            {comments.map(comment => (\r\n              <Card fluid key={comment.id}>\r\n                <Card.Content>\r\n                  {user && user.username === comment.username && (\r\n                    <DeleteButton postId={id} commentId={comment.id} callback={deletePostCallback}/>\r\n                  )}\r\n                  <Card.Header>{comment.username}</Card.Header>\r\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\r\n                  <Card.Description>{comment.body}</Card.Description>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    )\r\n  }\r\n  return postMarkup;\r\n}\r\n\r\nconst SUBMIT_COMMENT_MUTATION = gql `\r\n  mutation($postId: String!, $body: String!) {\r\n    createComment(postId: $postId, body: $body){\r\n      id\r\n      comments{\r\n        id body createdAt username\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`\r\n\r\nconst FETCH_POST_QUERY = gql `\r\n  query($postId: ID!){\r\n    getPost(postId: $postId){\r\n      id body createdAt username likeCount\r\n      likes{\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id username createdAt body\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default SinglePost\r\n\r\n\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from \"react-router-dom\";\nimport { Container } from \"semantic-ui-react\"\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nimport { AuthProvider } from './context/auth';\nimport AuthRoute from './utils/AuthRoute';\n\nimport MenuBar from './components/MenuBar';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport SinglePost from './pages/SinglePost';\n\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Route exact path=\"/\" component={Home} />\n          <AuthRoute exact path=\"/login\" component={Login} />\n          <AuthRoute exact path=\"/register\" component={Register} />\n          <Route exact path=\"/posts/:postId\" component={SinglePost} />\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport App from './App';\r\nimport { ApolloClient, InMemoryCache, createHttpLink, ApolloProvider } from '@apollo/client';\r\nimport { setContext } from 'apollo-link-context';\r\n\r\n\r\nconst httpLink = createHttpLink({\r\n  // uri: \"http://localhost:5000\" for dev\r\n  uri: 'https://social-media-merng-app.herokuapp.com'\r\n});\r\n\r\nconst authLink = setContext(() => {\r\n  const token = localStorage.getItem('jwtToken');\r\n  return{\r\n    headers: {\r\n      Authorization: token ? `Bearer ${token}` : '' // makes sure user who posts has valid token\r\n    }\r\n  }\r\n})\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache()\r\n});\r\n\r\n\r\n\r\nexport default (\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>\r\n)\r\n","import ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport ApolloProvider from \"./ApolloProvider\"\n\nReactDOM.render(\n  ApolloProvider,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}